# Python CircleCI 2.0 configuration file file file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  docker: circleci/docker@1.6.0

jobs:
  linting-docker-code:
    docker:
    - image: python:3.7.3-stretch
    working_directory: ~/repo

    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "requirements.txt" }}
        - v1-dependencies-
    - run:
        name: install dependencies
        command: |
          python3 -m venv venv
          . venv/bin/activate
          make install
          wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&
          chmod +x /bin/hadolint
    - save_cache:
        paths:
        - ./venv
        key: v1-dependencies-{{ checksum "requirements.txt" }}
    - run:
        name: run lint
        command: |
          . venv/bin/activate
          make lint

  create-kubernetes-cluster:
    docker:
    - image: alpine/k8s:1.15.12
    working_directory: /workspace
    steps:
      - checkout
      #- add_ssh_keys:
          #fingerprints: ["0f:62:8c:7b:9f:78:e0:4d:cf:08:b5:0c:2a:b3:25:60"]
      - run:
          name: store current cluster name
          command: |
            echo $(aws eks list-clusters | python3 -c "import sys, json; print(json.load(sys.stdin)['clusters'][0])") > cluster-old.txt
            cat cluster-old.txt
      - run:
          name: create new kubernetes cluster
          command: |
            sed -i "s/kubernetes-cluster/udacity-capstone-${CIRCLE_SHA1:0:7}/g" cluster.yml
            eksctl create cluster -f cluster.yml
      - run:
          name: store new cluster name
          command: |
            echo "udacity-capstone-${CIRCLE_SHA1:0:7}" > cluster-new.txt
            cat cluster-new.txt
      - run:
          name: Deploy Application on Kubernetes
          command: |
            aws eks update-kubeconfig --name "udacity-capstone-${CIRCLE_SHA1:0:7}"
            echo "applying config"
            export KUBECONFIG=/root/.kube/config
            kubectl get svc
            echo "deploying configs"
            kubectl apply -f deployment/
            kubectl rollout status deployment mlmodel-app
      - run:
          name: Add service ip to a file
          command: |
            echo "$(kubectl get services mlmodel-app-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > lb-service.txt
            cat lb-service.txt
      - persist_to_workspace:
          root: /workspace
          paths:
            - cluster-new.txt
            - cluster-old.txt
            - lb-service.txt

  smoke-test:
    docker:
      - image: alpine/k8s:1.16.15
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      
      - run:
          name: get curl
          command: |
            apk add curl
      - run:
          name: smoke
          command: |
            export serviceURL="$(cat /workspace/lb-service.txt)" 
            export URL="http://"${serviceURL}":8000"
            echo $URL
            sleep 300
            if curl ${URL} | grep "Sklearn"
            then
              echo "mlmodel is listening at port 8000 "
            else
              echo "Error - site not reached"
              return 1
            fi

  destroy-previous-deployment:
    docker:
      - image: alpine/k8s:1.16.15
    working_directory: /workspace
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      
      - run:
          name: delete previous MLmodel apps deployment
          command: |
            OLD=$(cat /workspace/cluster-old.txt)
            echo $OLD
            if [ -z "$OLD" ]
            then
                  echo " No old cluster found"
            else
                  echo "destroying old eks : " $OLD
                  aws eks update-kubeconfig --name="${OLD}"
                  export KUBECONFIG=/root/.kube/config
                  echo "updated config"
                  kubectl get svc
                  echo "running deletion"
                  kubectl delete -f deployment/
                  echo "deleted"
            fi
      - run:
          name: Delete old kubernetes cluster
          command: |
            #old is in the previous kubernetes file 
            OLD=$(cat /workspace/cluster-old.txt)
            echo $OLD
            #this checks if old exists
            if [ -z "$OLD" ]
            then
                  echo $OLD " is not found"
            else
                  echo "destroying old containers : " $OLD
                  eksctl delete cluster $OLD
                  echo "Deleted"
            fi

workflows:
  deployment:
    jobs:
      - linting-docker-code
      - docker/publish:
          image: $DOCKER_LOGIN/udacity-project
          tag: ${CIRCLE_SHA1:0:7},latest
          dockerfile: Dockerfile
          requires:
            - linting-docker-code    
      - create-kubernetes-cluster:
          requires:
            - docker/publish
      - smoke-test:
          requires:
            - create-kubernetes-cluster
      - destroy-previous-deployment:
          requires:
            - smoke-test

    